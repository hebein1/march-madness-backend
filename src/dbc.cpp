#include "dbc.h"
#include <fstream>


DBC::DBC()
{
    sqlite3_open("test.db", &db);

}

DBC::DBC(std::string dbfile)
{
    sqlite3_open(dbfile.c_str(), &db);
}

DBC::~DBC()
{
    sqlite3_close(db);
}

/**
 * retrieveGames
 * Returns a list of all games from the database in a C++ readable format 
 */
std::list<Game> DBC::retrieveGames()
{
    std::list<Game> gameRecords;
    sqlite3_stmt * stmt;

    sqlite3_prepare(db, "SELECT * FROM Games", -1, &stmt, NULL);

    int result = sqlite3_step(stmt);
    while (result == SQLITE_ROW)
    {
        std::string teamA((const char *) sqlite3_column_text(stmt, 0));
        std::string teamB((const char *) sqlite3_column_text(stmt, 1));
        int teamAScore(sqlite3_column_int(stmt, 2));
        int teamBScore(sqlite3_column_int(stmt, 3));
        std::string date((const char *) sqlite3_column_text(stmt, 4));
        std::string year = date.substr(0, 4);
        std::string month = date.substr(5, 2);
        std::string day = date.substr(8, 2);
        bool teamAHome = (bool) sqlite3_column_int(stmt, 5);
        bool teamBHome = (bool) sqlite3_column_int(stmt, 6);

        struct Game toBeAdded(teamA, teamB, teamAScore, teamBScore, year, month, day,
            teamAHome, teamBHome);

        gameRecords.push_back(toBeAdded);

        result = sqlite3_step(stmt);
    }

    sqlite3_finalize(stmt);

    return gameRecords;
}

/**
 * Add a new entry to the database. Typically used as a helper for reading in ESPN Data.
 */
void DBC::addGame(std::string teamA, std::string teamB, int teamAScore, int teamBScore, bool teamAHome, bool teamBHome)
{
    sqlite3_stmt * stmt;

    std::string stmttext("INSERT INTO Games VALUES('");
    stmttext.append(teamA);
    stmttext.append("', '");
    stmttext.append(teamB);
    stmttext.append("', ");
    stmttext.append(std::to_string(teamAScore));
    stmttext.append(", ");
    stmttext.append(std::to_string(teamBScore));
    stmttext.append(", '1990-01-01', ");

    if (teamAHome)
    {
        stmttext.append("1, 0)");
    }
    else
    {
        stmttext.append("0, 1)");
    }

    sqlite3_prepare(db, stmttext.c_str(), -1, &stmt, NULL);
    int result = sqlite3_step(stmt);

    sqlite3_finalize(stmt);
}

/**
 * Write the contents of the DB to a file usable by the C5 algo.
 */
void DBC::writeC5(std::string filename)
{
    std::ofstream cfile(filename.c_str());
    std::list <Game> gameHistory = retrieveGames();
    for(auto it = gameHistory.begin(); it != gameHistory.end(); it++)
    {
        cfile << it -> scoreA << "," << it -> scoreB << ","; 
        if (it -> scoreA >= it -> scoreB)
            cfile << "A\n";
        else
            cfile << "B\n";
    }
    cfile.close();

}

/**
 * Write the contents of the DB to a file usable by the ANN algo.
 */
void DBC::writeANN(std::string filename)
{
    std::ofstream afile(filename.c_str());
    std::list<Game> gameHistory = retrieveGames();

    afile << gameHistory.size() << " 2 1\n";
    for(auto it = gameHistory.begin(); it != gameHistory.end(); it++)
    {
        afile << it -> scoreA << " " << it -> scoreB << "\n";

        if (it -> scoreA >= it -> scoreB)
            afile << 1;
        else
            afile << 0;
        afile << "\n";
    }
    afile.close();
}

/**
 * Clear the contents of the database.
 * ONLY USED FOR TESTING PURPOSES.
 */
void DBC::clearDB()
{
    sqlite3_stmt * stmt;
    sqlite3_prepare(db, "DELETE FROM Games WHERE TeamA LIKE '%'", -1, &stmt, NULL);
    sqlite3_step(stmt);
}

/**
 * Read in data generated by our ESPN scraper.
 */
void DBC::readESPN(std::string filename)
{

    std::ifstream teamfile(filename);
    std::string line;
    if (teamfile.is_open())
    {
        std::string teamA;
        getline(teamfile, line); //-----------------------------
        getline(teamfile, teamA);
        getline(teamfile, line); //-----------------------------

        while(true)
        {
            std::string home;
            std::string teamB;
            std::string winLoss;
            std::string score;
            bool teamAHome;
            bool teamBHome;
            std::string teamAScore;
            std::string teamBScore;


            getline(teamfile, home);
            getline(teamfile, teamB);
            getline(teamfile, winLoss); 
            getline(teamfile, score);
            getline(teamfile, line); //-----------------------------

            if (teamfile.eof())
                break;

            if (home == std::string("HOME"))
            {
                teamAHome = true;
                teamBHome = false; 
            }
            else
            {
                teamAHome = false;
                teamBHome = true;
            }

            if (teamB[0] == '#')
            {
                teamB.erase(0, teamB.find_first_of(" ") + 1);
            }
            if (teamB.find_first_of("*") != std::string::npos)
            {
                teamB.pop_back();
            }

            if (winLoss == "W")
            {
                teamAScore = score.substr(0, score.find_first_of("-"));
                score.erase(0, score.find_first_of("-") + 1);
                teamBScore = score;
            }
            else
            {
                teamBScore = score.substr(0, score.find_first_of("-"));
                score.erase(0, score.find_first_of("-") + 1);
                teamAScore = score;
            }
            
            addGame(teamA, teamB, atoi(teamAScore.c_str()), atoi(teamBScore.c_str()), teamAHome, teamBHome);
        }
    } 

    teamfile.close();

}
